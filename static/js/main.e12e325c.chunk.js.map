{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","Footer","href","App","useState","status","setFilterTodos","useEffect","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","getLocalTodos","filterHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e12e325c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {\n  const inputTextHandler = (e) => {\n    console.log(e.target.value);\n    setInputText(e.target.value);\n  };\n\n  const submitTodoHandler = (e) => {\n    e.preventDefault();\n    setTodos([\n      ...todos,\n      { text: inputText, completed: false, id: Math.random() * 1000 },\n    ]);\n    setInputText(\"\");\n  };\n\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  };\n\n  return (\n    <form>\n      <input\n        value={inputText}\n        onChange={inputTextHandler}\n        type=\"text\"\n        className=\"todo-input\"\n      />\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n      <div className=\"select\">\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst Todo = ({ text, id, todos, setTodos, todo }) => {\n  const deleteHandler = () => {\n    setTodos(todos.filter((el) => el.id !== todo.id));\n  };\n  const completeHandler = () => {\n    setTodos(\n      todos.map((item) => {\n        if (item.id === todo.id) {\n          return { ...item, completed: !item.completed };\n        }\n        return item;\n      })\n    );\n  };\n  return (\n    <div className=\"todo\">\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\n        {text}\n      </li>\n      <button onClick={completeHandler} className=\"complete-btn\">\n        <i className=\"fas fa-check\"></i>\n      </button>\n      <button onClick={deleteHandler} className=\"trash-btn\">\n        <i className=\"fas fa-trash\"></i>\n      </button>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\n\n// Importing Components\nimport Todo from \"./Todo\";\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n  return (\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {filteredTodos.map((todo) => (\n          <Todo\n            todo={todo}\n            setTodos={setTodos}\n            todos={todos}\n            text={todo.text}\n            key={todo.id}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <h2>\n        &copy; Sameer Jha ({\" \"}\n        <a href=\"https://sameer-jha.github.io\">\n          <i className=\"fas fa-globe\"></i>\n        </a>{\" \"}\n        |{\" \"}\n        <a href=\"https://github.com/Sameer-Jha\">\n          <i className=\"fab fa-github\"></i>\n        </a>{\" \"}\n        )\n      </h2>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n// Importing Components\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  // Creating variuos States\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilterTodos] = useState([]);\n\n  // Filter handler function (Used in useEffect block on status) Ignore its warning.\n  const filterHandler = () => {\n    switch (status) {\n      case \"completed\":\n        setFilterTodos(todos.filter((todo) => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilterTodos(todos.filter((todo) => todo.completed === false));\n        break;\n      default:\n        setFilterTodos(todos);\n        break;\n    }\n  };\n\n  // Saving todos to Local Storage\n  const saveLocalTodos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  // Accessing the Local Storage entities\n  const getLocalTodos = () => {\n    if (localStorage.getItem(\"todos\") === null) {\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  };\n\n  // Run on startup\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  // Use effect implementation for filter handeling\n  useEffect(\n    () => {\n      filterHandler();\n      saveLocalTodos();\n    },\n    // eslint-disable-next-line\n    [todos, status]\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>My Todo List</h1>\n      </header>\n      <Form\n        inputText={inputText}\n        setInputText={setInputText}\n        todos={todos}\n        setTodos={setTodos}\n        setStatus={setStatus}\n      />\n      <TodoList\n        todos={todos}\n        setTodos={setTodos}\n        filteredTodos={filteredTodos}\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}